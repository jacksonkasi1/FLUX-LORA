service: flux-lora-backend

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'ap-south-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 30
  
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    DYNAMODB_TABLE_PREFIX: ${self:service}-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'default-jwt-secret-for-development'}
    CORS_ORIGIN: ${env:CORS_ORIGIN, '*'}
    
  iam:
    role:
      statements:
        # DynamoDB permissions
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PREFIX}-*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PREFIX}-*/index/*"
        
        # S3 permissions
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:GetObjectAcl
            - s3:PutObjectAcl
          Resource:
            - "arn:aws:s3:::${self:service}-${self:provider.stage}-*/*"
        
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::${self:service}-${self:provider.stage}-*"

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  dotenv:
    path: .env
    basePath: ./
    include:
      - JWT_SECRET
      - CORS_ORIGIN
      - FALAI_API_KEY
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
      - DYNAMODB_TABLE_PREFIX
      - STAGE

  serverless-offline:
    httpPort: 3001
    host: 0.0.0.0
    corsAllowOrigin: '*'
    corsAllowHeaders: 'accept,content-type,x-api-key,authorization'

functions:
  # Authentication functions
  authRegister:
    handler: functions/auth/register.handler
    events:
      - http:
          path: /auth/register
          method: post
          cors: true
          
  authLogin:
    handler: functions/auth/login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true
          
  authProfile:
    handler: functions/auth/profile.handler
    events:
      - http:
          path: /auth/profile
          method: get
          cors: true
      - http:
          path: /auth/profile
          method: put
          cors: true

  # Settings functions
  settings:
    handler: functions/settings/index.handler
    events:
      - http:
          path: /settings
          method: get
          cors: true
      - http:
          path: /settings
          method: put
          cors: true

  # Training models functions
  models:
    handler: functions/models/index.handler
    events:
      - http:
          path: /models
          method: get
          cors: true
      - http:
          path: /models
          method: post
          cors: true
      - http:
          path: /models/{id}
          method: get
          cors: true
      - http:
          path: /models/{id}
          method: put
          cors: true
      - http:
          path: /models/{id}
          method: delete
          cors: true

  # Training images functions
  trainingImages:
    handler: functions/images/training.handler
    events:
      - http:
          path: /models/{modelId}/images
          method: get
          cors: true
      - http:
          path: /models/{modelId}/images
          method: post
          cors: true
      - http:
          path: /images/{id}
          method: delete
          cors: true

  # Generated images functions
  generatedImages:
    handler: functions/images/generated.handler
    events:
      - http:
          path: /generated-images
          method: get
          cors: true
      - http:
          path: /generated-images
          method: post
          cors: true
      - http:
          path: /generated-images/{id}
          method: put
          cors: true
      - http:
          path: /generated-images/{id}
          method: delete
          cors: true

  # File upload functions
  upload:
    handler: functions/upload/index.handler
    events:
      - http:
          path: /upload/presigned
          method: post
          cors: true

resources:
  Resources:
    # DynamoDB Tables
    UserSettingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-user-settings
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    TrainingModelsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-training-models
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    TrainingImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-training-images
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: modelId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ModelIdIndex
            KeySchema:
              - AttributeName: modelId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    GeneratedImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-generated-images
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: modelId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ModelIdIndex
            KeySchema:
              - AttributeName: modelId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    # S3 Buckets
    TrainingImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-training-images
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000

    GeneratedImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-generated-images
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000

    ModelsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-models
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiRootResourceId

    ApiUrl:
      Description: API Gateway endpoint URL
      Value:
        Fn::Join:
          - ''
          - - 'https://'
            - Ref: ApiGatewayRestApi
            - '.execute-api.'
            - ${self:provider.region}
            - '.amazonaws.com/'
            - ${self:provider.stage}
      Export:
        Name: ${self:service}-${self:provider.stage}-ApiUrl
