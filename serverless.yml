service: flux-lora-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    DYNAMODB_TABLE_PREFIX: ${self:service}-${self:provider.stage}
    S3_BUCKET: ${self:service}-${self:provider.stage}-storage
    CORS_ORIGIN: ${env:CORS_ORIGIN, '*'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PREFIX}-*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::${self:provider.environment.S3_BUCKET}"
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminDeleteUser
          Resource:
            - "arn:aws:cognito-idp:${self:provider.region}:*:userpool/*"

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    httpPort: 3001
    corsAllowOrigin: '*'
    corsAllowHeaders: 'accept,content-type,x-api-key,authorization'

functions:
  # Authentication functions
  register:
    handler: src/lambda/auth/register.handler
    events:
      - http:
          path: auth/register
          method: post
          cors: true

  login:
    handler: src/lambda/auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  getProfile:
    handler: src/lambda/auth/profile.handler
    events:
      - http:
          path: auth/profile
          method: get
          cors: true

  updateProfile:
    handler: src/lambda/auth/profile.updateHandler
    events:
      - http:
          path: auth/profile
          method: put
          cors: true

  # User settings functions
  getUserSettings:
    handler: src/lambda/settings/get.handler
    events:
      - http:
          path: settings
          method: get
          cors: true

  updateUserSettings:
    handler: src/lambda/settings/update.handler
    events:
      - http:
          path: settings
          method: put
          cors: true

  # Training models functions
  getTrainingModels:
    handler: src/lambda/models/list.handler
    events:
      - http:
          path: models
          method: get
          cors: true

  createTrainingModel:
    handler: src/lambda/models/create.handler
    events:
      - http:
          path: models
          method: post
          cors: true

  getTrainingModel:
    handler: src/lambda/models/get.handler
    events:
      - http:
          path: models/{id}
          method: get
          cors: true

  updateTrainingModel:
    handler: src/lambda/models/update.handler
    events:
      - http:
          path: models/{id}
          method: put
          cors: true

  deleteTrainingModel:
    handler: src/lambda/models/delete.handler
    events:
      - http:
          path: models/{id}
          method: delete
          cors: true

  # Training images functions
  getTrainingImages:
    handler: src/lambda/images/list.handler
    events:
      - http:
          path: models/{modelId}/images
          method: get
          cors: true

  uploadTrainingImage:
    handler: src/lambda/images/upload.handler
    events:
      - http:
          path: models/{modelId}/images
          method: post
          cors: true

  deleteTrainingImage:
    handler: src/lambda/images/delete.handler
    events:
      - http:
          path: images/{id}
          method: delete
          cors: true

  # Generated images functions
  getGeneratedImages:
    handler: src/lambda/generated/list.handler
    events:
      - http:
          path: generated-images
          method: get
          cors: true

  createGeneratedImage:
    handler: src/lambda/generated/create.handler
    events:
      - http:
          path: generated-images
          method: post
          cors: true

  updateGeneratedImage:
    handler: src/lambda/generated/update.handler
    events:
      - http:
          path: generated-images/{id}
          method: put
          cors: true

  deleteGeneratedImage:
    handler: src/lambda/generated/delete.handler
    events:
      - http:
          path: generated-images/{id}
          method: delete
          cors: true

  # File upload presigned URL
  getUploadUrl:
    handler: src/lambda/upload/presigned.handler
    events:
      - http:
          path: upload/presigned
          method: post
          cors: true

resources:
  Resources:
    # S3 Bucket for file storage
    StorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
              MaxAge: 3000

    # DynamoDB Tables
    UserSettingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-user-settings
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    TrainingModelsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-training-models
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    TrainingImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-training-images
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: trainingModelId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TrainingModelIdIndex
            KeySchema:
              - AttributeName: trainingModelId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    GeneratedImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-generated-images
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Cognito User Pool
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-users
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId:
          Ref: UserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-restApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-rootResourceId

    UserPoolId:
      Value:
        Ref: UserPool
      Export:
        Name: ${self:service}-${self:provider.stage}-userPoolId

    UserPoolClientId:
      Value:
        Ref: UserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-userPoolClientId

    S3BucketName:
      Value:
        Ref: StorageBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-s3Bucket
